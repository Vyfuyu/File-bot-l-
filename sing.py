
import discord
from discord.ext import commands
import yt_dlp
import asyncio
import os
import json
from datetime import datetime
import aiohttp
import re

class MusicSearchView(discord.ui.View):
    def __init__(self, bot, user_id, search_results):
        super().__init__(timeout=300)
        self.bot = bot
        self.user_id = user_id
        self.search_results = search_results
        
        # T·∫°o select menu v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm
        options = []
        for i, result in enumerate(search_results[:10]):  # Gi·ªõi h·∫°n 10 k·∫øt qu·∫£
            title = result.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
            channel = result.get('uploader', 'Kh√¥ng r√µ k√™nh')
            duration = result.get('duration_string', 'N/A')
            
            # C·∫Øt ng·∫Øn title n·∫øu qu√° d√†i
            if len(title) > 80:
                title = title[:77] + "..."
                
            options.append(
                discord.SelectOption(
                    label=f"{i+1}. {title[:50]}...",
                    value=str(i),
                    description=f"K√™nh: {channel[:50]} | {duration}"
                )
            )
        
        if options:
            self.add_item(MusicSelectMenu(options, search_results))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå ƒê√¢y kh√¥ng ph·∫£i menu c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

class MusicSelectMenu(discord.ui.Select):
    def __init__(self, options, search_results):
        super().__init__(
            placeholder="Ch·ªçn b√†i h√°t b·∫°n mu·ªën t·∫£i...",
            min_values=1,
            max_values=1,
            options=options
        )
        self.search_results = search_results

    async def callback(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()
            
            selected_index = int(self.values[0])
            selected_song = self.search_results[selected_index]
            
            # T·∫°o embed th√¥ng b√°o ƒëang t·∫£i
            processing_embed = discord.Embed(
                title="üéµ ƒêang t·∫£i nh·∫°c...",
                description=f"**{selected_song.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}**\n\n‚è≥ Vui l√≤ng ch·ªù trong gi√¢y l√°t...",
                color=discord.Color.blue()
            )
            
            processing_msg = await interaction.followup.send(embed=processing_embed)
            
            # T·∫£i v√† g·ª≠i file nh·∫°c
            await self.download_and_send_music(interaction, selected_song, processing_msg)
            
        except Exception as e:
            print(f"L·ªói trong callback: {e}")
            try:
                error_embed = discord.Embed(
                    title="‚ùå L·ªói khi t·∫£i nh·∫°c",
                    description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                    color=discord.Color.red()
                )
                if interaction.response.is_done():
                    await interaction.followup.send(embed=error_embed)
                else:
                    await interaction.response.send_message(embed=error_embed)
            except:
                pass

    async def download_and_send_music(self, interaction, song_info, processing_msg=None):
        try:
            url = song_info.get('webpage_url') or song_info.get('url')
            if not url:
                return await interaction.followup.send("‚ùå Kh√¥ng t√¨m th·∫•y URL c·ªßa b√†i h√°t!")

            # T·∫°o th∆∞ m·ª•c cache n·∫øu ch∆∞a c√≥
            os.makedirs("music_cache", exist_ok=True)
            
            # T·∫°o t√™n file an to√†n (kh√¥ng c√≥ extension v√¨ yt-dlp s·∫Ω t·ª± th√™m)
            safe_title = re.sub(r'[^\w\s-]', '', song_info.get('title', 'unknown'))[:50]
            filename_base = f"music_cache/{safe_title}_{interaction.user.id}"
            final_filename = f"{filename_base}.mp3"
            
            # C·∫•u h√¨nh yt-dlp
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': filename_base + '.%(ext)s',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '128',
                }],
                'noplaylist': True,
                'quiet': True,
                'no_warnings': True,
            }

            # T·∫£i nh·∫°c trong thread pool ƒë·ªÉ kh√¥ng block bot
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self.download_audio, url, ydl_opts)
            
            # Ki·ªÉm tra file ƒë√£ t·∫£i
            if not os.path.exists(final_filename):
                return await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫£i file nh·∫°c!")
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (Discord limit 8MB cho free)
            file_size = os.path.getsize(final_filename)
            if file_size > 8 * 1024 * 1024:  # 8MB
                os.remove(final_filename)
                return await interaction.followup.send("‚ùå File qu√° l·ªõn! Vui l√≤ng ch·ªçn b√†i h√°t ng·∫Øn h∆°n.")
            
            # T·∫°o embed th√¥ng tin b√†i h√°t
            info_embed = discord.Embed(
                title="üéµ ƒê√£ t·∫£i xong!",
                description=f"**{song_info.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}**",
                color=discord.Color.green()
            )
            
            # Th√™m th√¥ng tin chi ti·∫øt
            if song_info.get('uploader'):
                info_embed.add_field(name="üé§ K√™nh", value=song_info['uploader'], inline=True)
            
            if song_info.get('duration_string'):
                info_embed.add_field(name="‚è∞ Th·ªùi l∆∞·ª£ng", value=song_info['duration_string'], inline=True)
            
            if song_info.get('view_count'):
                view_count = f"{song_info['view_count']:,}" if isinstance(song_info['view_count'], int) else song_info['view_count']
                info_embed.add_field(name="üëÄ L∆∞·ª£t xem", value=view_count, inline=True)
            
            info_embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {interaction.user.display_name}")
            
            # G·ª≠i file nh·∫°c
            with open(final_filename, 'rb') as f:
                discord_file = discord.File(f, filename=f"{safe_title}.mp3")
                await interaction.followup.send(embed=info_embed, file=discord_file)
            
            # X√≥a file sau khi g·ª≠i
            if os.path.exists(final_filename):
                os.remove(final_filename)
                
        except Exception as e:
            # Cleanup file n·∫øu c√≥ l·ªói
            if 'final_filename' in locals() and os.path.exists(final_filename):
                os.remove(final_filename)
            
            await interaction.followup.send(f"‚ùå L·ªói khi t·∫£i nh·∫°c: {str(e)}")

    def download_audio(self, url, ydl_opts):
        """H√†m t·∫£i nh·∫°c (ch·∫°y trong thread pool)"""
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

class MusicSearch(commands.Cog):
    """T√¨m ki·∫øm v√† t·∫£i nh·∫°c t·ª´ YouTube"""
    
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="sing", help="T√¨m ki·∫øm v√† t·∫£i nh·∫°c t·ª´ YouTube")
    @commands.cooldown(1, 30, commands.BucketType.user)  # Cooldown 30 gi√¢y
    async def sing(self, ctx, *, query: str = None):
        """L·ªánh t√¨m ki·∫øm v√† t·∫£i nh·∫°c t·ª´ YouTube"""
        
        if not query:
            embed = discord.Embed(
                title="üéµ L·ªánh Sing - T·∫£i nh·∫°c YouTube",
                description="**C√°ch s·ª≠ d·ª•ng:**\n`!sing <t√™n b√†i h√°t>` - T√¨m ki·∫øm b√†i h√°t\n`!sing <link YouTube>` - T·∫£i tr·ª±c ti·∫øp t·ª´ link",
                color=discord.Color.blue()
            )
            embed.add_field(
                name="üìù V√≠ d·ª•:",
                value="‚Ä¢ `!sing s∆°n t√πng remix`\n‚Ä¢ `!sing https://youtube.com/watch?v=...`",
                inline=False
            )
            return await ctx.send(embed=embed)

        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t√¨m ki·∫øm
        searching_embed = discord.Embed(
            title="üîç ƒêang t√¨m ki·∫øm...",
            description=f"ƒêang t√¨m ki·∫øm: **{query}**\n‚è≥ Vui l√≤ng ch·ªù...",
            color=discord.Color.blue()
        )
        search_msg = await ctx.send(embed=searching_embed)

        try:
            # Ki·ªÉm tra n·∫øu l√† link YouTube
            if 'youtube.com' in query or 'youtu.be' in query:
                await self.download_direct_link(ctx, query, search_msg)
            else:
                await self.search_and_display_results(ctx, query, search_msg)
                
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå L·ªói t√¨m ki·∫øm",
                description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                color=discord.Color.red()
            )
            await search_msg.edit(embed=error_embed)

    async def search_and_display_results(self, ctx, query, search_msg):
        """T√¨m ki·∫øm v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
        try:
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'default_search': 'ytsearch10:',  # T√¨m 10 k·∫øt qu·∫£
            }
            
            # T√¨m ki·∫øm trong thread pool
            loop = asyncio.get_event_loop()
            search_results = await loop.run_in_executor(
                None, self.search_youtube, f"ytsearch10:{query}", ydl_opts
            )
            
            if not search_results:
                no_results_embed = discord.Embed(
                    title="üòï Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
                    description=f"Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o cho: **{query}**",
                    color=discord.Color.orange()
                )
                return await search_msg.edit(embed=no_results_embed)
            
            # T·∫°o embed hi·ªÉn th·ªã k·∫øt qu·∫£
            results_embed = discord.Embed(
                title="üéµ K·∫øt qu·∫£ t√¨m ki·∫øm",
                description=f"T√¨m th·∫•y **{len(search_results)}** k·∫øt qu·∫£ cho: **{query}**",
                color=discord.Color.green()
            )
            
            # Hi·ªÉn th·ªã 5 k·∫øt qu·∫£ ƒë·∫ßu ti√™n trong embed
            for i, result in enumerate(search_results[:5]):
                title = result.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                uploader = result.get('uploader', 'Kh√¥ng r√µ')
                duration = result.get('duration_string', 'N/A')
                
                results_embed.add_field(
                    name=f"{i+1}. {title[:60]}{'...' if len(title) > 60 else ''}",
                    value=f"üë§ {uploader}\n‚è∞ {duration}",
                    inline=False
                )
            
            results_embed.set_footer(text="S·ª≠ d·ª•ng menu dropdown b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn b√†i h√°t")
            
            # T·∫°o view v·ªõi select menu
            view = MusicSearchView(self.bot, ctx.author.id, search_results)
            
            await search_msg.edit(embed=results_embed, view=view)
            
        except Exception as e:
            raise e

    async def download_direct_link(self, ctx, url, search_msg):
        """T·∫£i tr·ª±c ti·∫øp t·ª´ link YouTube"""
        try:
            # C·∫≠p nh·∫≠t th√¥ng b√°o
            processing_embed = discord.Embed(
                title="‚è¨ ƒêang t·∫£i t·ª´ link...",
                description=f"**Link:** {url}\n‚è≥ Vui l√≤ng ch·ªù...",
                color=discord.Color.blue()
            )
            await search_msg.edit(embed=processing_embed)
            
            # L·∫•y th√¥ng tin video
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
            }
            
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, self.get_video_info, url, ydl_opts)
            
            if not info:
                return await search_msg.edit(embed=discord.Embed(
                    title="‚ùå L·ªói",
                    description="Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video!",
                    color=discord.Color.red()
                ))
            
            # T·∫£i file nh·∫°c
            await self.download_and_send_music_direct(ctx, search_msg, info, url)
            
        except Exception as e:
            raise e

    def search_youtube(self, query, ydl_opts):
        """T√¨m ki·∫øm YouTube (ch·∫°y trong thread pool)"""
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            results = ydl.extract_info(query, download=False)
            if 'entries' in results:
                return results['entries']
            return []

    def get_video_info(self, url, ydl_opts):
        """L·∫•y th√¥ng tin video (ch·∫°y trong thread pool)"""
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            return ydl.extract_info(url, download=False)

    async def download_and_send_music_direct(self, ctx, search_msg, info, url):
        """T·∫£i v√† g·ª≠i nh·∫°c tr·ª±c ti·∫øp"""
        try:
            # T·∫°o th∆∞ m·ª•c cache
            os.makedirs("music_cache", exist_ok=True)
            
            # T·∫°o t√™n file an to√†n
            safe_title = re.sub(r'[^\w\s-]', '', info.get('title', 'unknown'))[:50]
            filename_base = f"music_cache/{safe_title}_{ctx.author.id}"
            final_filename = f"{filename_base}.mp3"
            
            # C·∫•u h√¨nh t·∫£i
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': filename_base + '.%(ext)s',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '128',
                }],
                'noplaylist': True,
                'quiet': True,
                'no_warnings': True,
            }
            
            # T·∫£i file
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self.download_audio_direct, url, ydl_opts)
            
            # Ki·ªÉm tra file
            if not os.path.exists(final_filename):
                return await search_msg.edit(embed=discord.Embed(
                    title="‚ùå L·ªói",
                    description="Kh√¥ng th·ªÉ t·∫£i file nh·∫°c!",
                    color=discord.Color.red()
                ))
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc
            file_size = os.path.getsize(final_filename)
            if file_size > 8 * 1024 * 1024:  # 8MB
                os.remove(final_filename)
                return await search_msg.edit(embed=discord.Embed(
                    title="‚ùå File qu√° l·ªõn",
                    description="File v∆∞·ª£t qu√° 8MB. Vui l√≤ng ch·ªçn b√†i h√°t ng·∫Øn h∆°n!",
                    color=discord.Color.red()
                ))
            
            # T·∫°o embed k·∫øt qu·∫£
            success_embed = discord.Embed(
                title="üéµ T·∫£i th√†nh c√¥ng!",
                description=f"**{info.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}**",
                color=discord.Color.green()
            )
            
            if info.get('uploader'):
                success_embed.add_field(name="üé§ K√™nh", value=info['uploader'], inline=True)
            
            if info.get('duration_string'):
                success_embed.add_field(name="‚è∞ Th·ªùi l∆∞·ª£ng", value=info['duration_string'], inline=True)
            
            if info.get('view_count'):
                view_count = f"{info['view_count']:,}" if isinstance(info['view_count'], int) else info['view_count']
                success_embed.add_field(name="üëÄ L∆∞·ª£t xem", value=view_count, inline=True)
            
            success_embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {ctx.author.display_name}")
            
            # G·ª≠i file
            with open(final_filename, 'rb') as f:
                discord_file = discord.File(f, filename=f"{safe_title}.mp3")
                await search_msg.edit(embed=success_embed)
                await ctx.send(file=discord_file)
            
            # Cleanup
            if os.path.exists(final_filename):
                os.remove(final_filename)
                
        except Exception as e:
            if 'final_filename' in locals() and os.path.exists(final_filename):
                os.remove(final_filename)
            raise e

    def download_audio_direct(self, url, ydl_opts):
        """T·∫£i audio tr·ª±c ti·∫øp (ch·∫°y trong thread pool)"""
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

async def setup(bot):
    await bot.add_cog(MusicSearch(bot))
